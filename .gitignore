// second longest common subsequence
class SLCS {
    static void lcs(String S1, String S2, int m, int n) {
        int[][] LCS_table = new int[m + 1][n + 1];

        // making the LCS table
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0 || j == 0)
                    LCS_table[i][j] = 0;
                else if (S1.charAt(i - 1) == S2.charAt(j - 1))
                    LCS_table[i][j] = LCS_table[i - 1][j - 1] + 1;
                else
                    LCS_table[i][j] = Math.max(LCS_table[i - 1][j], LCS_table[i][j - 1]);
            }
        }
        // 1st LCS
        System.out.print("\n\nString 1 : " + S1 + " " + "String 2 : " + S2 + "\n1st LCS: ");
        printAllLCS(S1, S2, LCS_table, m, n);

        // second LCS
        System.out.print("\n\nString 1 : " + S1 + " " + "String 2 : " + S2 + "\nSecond LCS: ");
        printAllLCS(S1, S2, LCS_table, m - 1, n - 1);
    }

    static void printAllLCS(String s1, String s2, int[][] lcsTable, int m, int n) {
        int index = lcsTable[m][n];
        char[] lcs = new char[index + 1];
        lcs[index] = '\0';

        int i = m, j = n;
        while (i > 0 && j > 0) {
            if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                lcs[index - 1] = s1.charAt(i - 1);
                i--;
                j--;
                index--;
            } else if (lcsTable[i - 1][j] > lcsTable[i][j - 1]) {
                i--;
            } else {
                j--;
            }
        }

        // Printing the subsequences
        for (int k = 0; k <= lcsTable[m][n]; k++) {
            System.out.print(lcs[k]);
        }
        System.out.println("");
    }

    public static void main(String[] args) {
        String S1 = "AGGTAB";
        String S2 = "GXTXAYB";
        int m = S1.length();
        int n = S2.length();
        lcs(S1, S2, m, n);
    }
}